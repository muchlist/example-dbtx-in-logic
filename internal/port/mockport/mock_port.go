// Code generated by MockGen. DO NOT EDIT.
// Source: port.go

// Package mockport is a generated GoMock package.
package mockport

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/muchlist/example-dbtx-in-logic/internal/model"
)

// MockTransferServiceAssumer is a mock of TransferServiceAssumer interface.
type MockTransferServiceAssumer struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceAssumerMockRecorder
}

// MockTransferServiceAssumerMockRecorder is the mock recorder for MockTransferServiceAssumer.
type MockTransferServiceAssumerMockRecorder struct {
	mock *MockTransferServiceAssumer
}

// NewMockTransferServiceAssumer creates a new mock instance.
func NewMockTransferServiceAssumer(ctrl *gomock.Controller) *MockTransferServiceAssumer {
	mock := &MockTransferServiceAssumer{ctrl: ctrl}
	mock.recorder = &MockTransferServiceAssumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferServiceAssumer) EXPECT() *MockTransferServiceAssumerMockRecorder {
	return m.recorder
}

// TransferMoney mocks base method.
func (m *MockTransferServiceAssumer) TransferMoney(ctx context.Context, input model.TransferDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferMoney", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferMoney indicates an expected call of TransferMoney.
func (mr *MockTransferServiceAssumerMockRecorder) TransferMoney(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferMoney", reflect.TypeOf((*MockTransferServiceAssumer)(nil).TransferMoney), ctx, input)
}

// MockAccountStorer is a mock of AccountStorer interface.
type MockAccountStorer struct {
	ctrl     *gomock.Controller
	recorder *MockAccountStorerMockRecorder
}

// MockAccountStorerMockRecorder is the mock recorder for MockAccountStorer.
type MockAccountStorerMockRecorder struct {
	mock *MockAccountStorer
}

// NewMockAccountStorer creates a new mock instance.
func NewMockAccountStorer(ctrl *gomock.Controller) *MockAccountStorer {
	mock := &MockAccountStorer{ctrl: ctrl}
	mock.recorder = &MockAccountStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountStorer) EXPECT() *MockAccountStorerMockRecorder {
	return m.recorder
}

// GetAccountByID mocks base method.
func (m *MockAccountStorer) GetAccountByID(ctx context.Context, id string) (model.AccountEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, id)
	ret0, _ := ret[0].(model.AccountEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockAccountStorerMockRecorder) GetAccountByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockAccountStorer)(nil).GetAccountByID), ctx, id)
}

// UpdateAccount mocks base method.
func (m *MockAccountStorer) UpdateAccount(ctx context.Context, account model.AccountEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountStorerMockRecorder) UpdateAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountStorer)(nil).UpdateAccount), ctx, account)
}

// MockTxManager is a mock of TxManager interface.
type MockTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder struct {
	mock *MockTxManager
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager(ctrl *gomock.Controller) *MockTxManager {
	mock := &MockTxManager{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager) EXPECT() *MockTxManagerMockRecorder {
	return m.recorder
}

// WithAtomic mocks base method.
func (m *MockTxManager) WithAtomic(ctx context.Context, tFunc func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAtomic", ctx, tFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithAtomic indicates an expected call of WithAtomic.
func (mr *MockTxManagerMockRecorder) WithAtomic(ctx, tFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAtomic", reflect.TypeOf((*MockTxManager)(nil).WithAtomic), ctx, tFunc)
}
